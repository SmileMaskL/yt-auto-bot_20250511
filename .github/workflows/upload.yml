name: ü§ñ YouTube Video Automation

on:
  schedule:
    - cron: '0 */6 * * *'  # Îß§ 6ÏãúÍ∞ÑÎßàÎã§ Ïã§Ìñâ
  workflow_dispatch:

jobs:
  upload-video:
    runs-on: ubuntu-22.04

    env:
      OPENAI_API_KEYS_BASE64: ${{ secrets.OPENAI_API_KEYS_BASE64 }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
      SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
      SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
      FFMPEG_BINARY: /usr/bin/ffmpeg

    steps:
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üõ†Ô∏è Install FFmpeg (Stable Static Build)
        run: |
          curl -L https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz -o ffmpeg.tar.xz
          tar -xf ffmpeg.tar.xz
          FF_DIR=$(find . -type d -name "ffmpeg-*-amd64-static" | head -n 1)
          sudo cp "$FF_DIR/ffmpeg" /usr/bin/ffmpeg
          sudo chmod +x /usr/bin/ffmpeg

          echo "üîç Checking FFmpeg version..."
          FFMPEG_VERSION_FULL=$(ffmpeg -version || echo "")
          echo "$FFMPEG_VERSION_FULL"

          FFMPEG_VERSION=$(echo "$FFMPEG_VERSION_FULL" | grep -oP 'ffmpeg version \K[^ ]+' | cut -d'.' -f1)
          if [ -z "$FFMPEG_VERSION" ] || [ "$FFMPEG_VERSION" -lt 6 ]; then
            echo "::error::‚ùå FFmpeg 6.0+ installation check failed. Detected major version: $FFMPEG_VERSION"
            exit 1
          fi
          echo "‚úÖ FFmpeg major version $FFMPEG_VERSION installed successfully."

      - name: üõ†Ô∏è (Backup) Install FFmpeg via APT
        if: failure()
        run: |
          echo "‚ö†Ô∏è Static build failed, trying APT fallback..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          which ffmpeg
          ffmpeg -version

      - name: üêç Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: üì¶ Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt --no-cache-dir
          else
            echo "::error::‚ùå requirements.txt not found!"
            exit 1
          fi

          echo "‚úÖ Setting MoviePy FFmpeg path manually..."
          python -c "import moviepy.config as mpc; mpc.change_settings({'FFMPEG_BINARY': '/usr/bin/ffmpeg'}); print(f'MoviePy FFmpeg path: {mpc.get_setting(\"FFMPEG_BINARY\")}')"

      - name: ‚úÖ Verify Essential Files
        run: |
          FONT_PATH="fonts/NotoSansCJKkr-Regular.otf"
          if [ ! -f "$FONT_PATH" ]; then
            echo "::error::‚ùå Required font file not found: $FONT_PATH"
            exit 1
          else
            echo "‚úÖ Font file verified: $(readlink -f $FONT_PATH)"
          fi

          BACKGROUND_PATH="background.jpg"
          if [ ! -f "$BACKGROUND_PATH" ]; then
            echo "::warning::‚ö†Ô∏è Background image not found: $BACKGROUND_PATH. Script might use a default color."
          else
            echo "‚úÖ Background image verified: $(readlink -f $BACKGROUND_PATH)"
          fi

      - name: üõ°Ô∏è Validate Environment Variables & Configuration
        run: |
          if [ ! -f scripts/validate_env.py ]; then
            echo "::error::‚ùå Missing validation script: scripts/validate_env.py"
            exit 1
          fi
          python scripts/validate_env.py

      - name: üöÄ Run Main Automation Script
        run: |
          if [ ! -f scripts/main.py ]; then
            echo "::error::‚ùå Missing main script: scripts/main.py"
            exit 1
          fi
          python scripts/main.py

      - name: üì§ Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-logs
          path: |
            *.log
            scripts/*.log
          retention-days: 7
