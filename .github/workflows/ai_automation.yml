name: 🤖 AI Video Factory 3.2 Ultra

on:
  schedule:
    - cron: '0 */4 * * *'  # 4시간 주기 실행
  workflow_dispatch:
    inputs:
      topic:
        description: '콘텐츠 주제'
        required: true
      quality:
        description: '해상도 (720p/1080p/4K)'
        default: '1080p'
      emergency_mode:
        description: "긴급 모드 활성화 (true/false)"
        default: 'false'

env:
  TZ: Asia/Seoul
  PYTHON_VERSION: '3.10.12'
  CACHE_VERSION: 'v25.05.14'

jobs:
  video-production:
    name: 🎬 AI 비디오 메가팩토리
    runs-on: ubuntu-22.04
    timeout-minutes: 55

    steps:
    # ===== [1단계] 코어 설정 =====
    - name: 🔄 저장소 클론 (전체 히스토리)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔐 보안 검증
      run: |
        # 폰트/자원 검증
        [ ! -f "fonts/NotoSansCJKkr-Regular.otf" ] && echo "::error::❌ 폰트 파일 누락" && exit 1
        echo "✅ 필수 자원 검증 완료"

    # ===== [2단계] 환경 구성 =====
    - name: 🛠️ 환경변수 인젝션
      env:
        ELEVENLABS_KEY: ${{ secrets.ELEVENLABS_KEY }}
        ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        OPENAI_API_KEYS_BASE64: ${{ secrets.OPENAI_API_KEYS_BASE64 }}
        SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
      run: |
        # .env 파일 생성
        echo "ELEVENLABS_KEY=$ELEVENLABS_KEY" >> .env
        echo "ELEVENLABS_VOICE_ID=$ELEVENLABS_VOICE_ID" >> .env
        echo "SLACK_API_TOKEN=$SLACK_API_TOKEN" >> .env
        echo "SLACK_CHANNEL=$SLACK_CHANNEL" >> .env
        echo "OPENAI_API_KEYS=$OPENAI_API_KEYS_BASE64" >> .env

        # Google 토큰 생성
        echo '{
          "client_id": "$GOOGLE_CLIENT_ID",
          "client_secret": "$GOOGLE_CLIENT_SECRET",
          "refresh_token": "$GOOGLE_REFRESH_TOKEN"
        }' | envsubst > token.json

        # 보안 검증
        python -c "import base64, json; \
          assert len(json.loads(base64.b64decode('$OPENAI_API_KEYS_BASE64'))) >= 2, 'OpenAI 키 부족'"

    # ===== [3단계] 파이썬 환경 =====
    - name: 🐍 Python ${{ env.PYTHON_VERSION }} 구성
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    - name: 📦 고성능 패키지 설치
      run: |
        pip install torch==2.3.0+cu121 \
          --extra-index-url https://download.pytorch.org/whl/cu121 \
          --no-cache-dir
        pip install -r requirements.txt \
          --extra-index-url https://download.pytorch.org/whl/cu121

    # ===== [4단계] AI 엔진 실행 =====
    - name: 🚀 멀티모달 AI 파이프라인
      env:
        FFMPEG_PATH: /usr/bin/ffmpeg
      run: |
        for attempt in {1..5}; do
          python scripts/main.py \
            --topic "${{ inputs.topic }}" \
            --quality ${{ inputs.quality }} \
            --emergency ${{ inputs.emergency_mode }} \
            --attempt $attempt && break
        done

    # ===== [5단계] 결과 관리 =====
    - name: 📤 아티팩트 업로드
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: ai-video-output
        path: |
          outputs/*.mp4
          outputs/*.log

    - name: 🚨 3단계 오류 알림
      if: failure()
      run: |
        python scripts/notifier.py \
          --status FAIL \
          --log automation.log \
          --slack-token ${{ secrets.SLACK_API_TOKEN }} \
          --channel ${{ secrets.SLACK_CHANNEL }}
